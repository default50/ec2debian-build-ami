#!/bin/bash

# Define some colors
txtdef="\e[0m"    # revert to default color
bldred="\e[1;31m" # bold red
txtblu="\e[0;34m" # blue
txtbld="\e[1m"    # bold
txtund="\e[4m"    # underline

logfile=''
logcolor=$txtblu
errfile=''
errcolor=$bldred

# Logging function without coloring
function logplain {
	for line in "$@"; do
		out "$line\n" "$line\n" $logfile
	done
}

# Logging function, each arg is a line
function log {
	for line in "$@"; do
		out "$logcolor$line$txtdef\n" "$line\n" $logfile
	done
}

# Log without the newline
function logn {
	out "$logcolor$1$txtdef" "$1" $logfile
}

# Custom die function, output to stderr instead of stdout, each arg is a line
function die {
	for line in "$@"; do
		out "$errcolor$line$txtdef\n" "$line\n" $errfile >&2
	done
	exit 1
}

# Output function, takes $msg, $filemsg and $file args in that order
function out {
	printf -- "$1"
	if [ -n "$3" ]; then
		printf -- "$2" >>$3
	fi
}

# Wait for the execution of $cmd not to return an empty string
function dotdot {
	local status=$1
	local cmd=$2
	local sleep=5
	[ ! -z "$3" ] && sleep=$3
	while [ -z "$status" ]; do
		logn '.'
		sleep $sleep
		status=`eval $cmd`
	done
	logn "\n"
}

# Turns once per newline that is piped into it
function spin {
	local cursor='|'
	# Running `tput cols` in every iteration would cause significant slowdown.
	# Only do this once, the spinner is not a "need to have" anyways.
	local cols=$(( `tput cols` - 2 ))
	while read line; do
		printf -- "\r$logcolor$cursor$txtdef %-${cols}s" "${line:0:$cols}"
		case $cursor in
			'|') cursor='/' ;;
			'/') cursor='-' ;;
			'-') cursor='\\' ;;
			'\\') cursor='|' ;;
		esac
	done
	printf "\n"
}

function insert_task_before {
	local new_task_list=()
	local added=false
	if [ ! -e $2 ]; then
		die "Unable to add task `basename $2` to the tasklist." "$2 does not exist."
	fi
	for task in ${tasks[*]}; do
		if [ `basename $task` == "$1" ]; then
			log "Adding task `basename $2` before task `basename $task`"
			new_task_list+=($2)
			added=true
		fi
		new_task_list+=($task)
	done
	if ! $added; then
		die "Unable to add `basename $2` to the tasklist." "Task $1 does not exist."
	fi
	tasks=("${new_task_list[@]}")
}

function insert_task_after {
	local new_task_list=()
	local added=false
	if [ ! -e $2 ]; then
		die "Unable to add task `basename $2` to the tasklist." "$2 does not exist."
	fi
	for task in ${tasks[*]}; do
		new_task_list+=($task)
		if [ `basename $task` == "$1" ]; then
			log "Adding task `basename $2` after task `basename $task`"
			new_task_list+=($2)
			added=true
		fi
	done
	if ! $added; then
		die "Unable to add `basename $2` to the tasklist." "Task $1 does not exist."
	fi
	tasks=("${new_task_list[@]}")
}

function remove_task {
	local new_task_list=()
	local removed=false
	for task in ${tasks[*]}; do
		if [ `basename $task` != "$1" ]; then
			new_task_list+=($task)
		else
			removed=true
			log "Removing task $1"
		fi
	done
	if ! $removed; then
		die "Unable to remove $1 from the tasklist." "The task does not exist."
	fi
	tasks=("${new_task_list[@]}")
}
