#!/bin/bash

# Stop execution if any command fails
set -e

# Rember various paths
scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
originaldir=$(pwd)

source $scriptdir/utils

# Tasks, packages, plugins, boot scripts
tasks=()
packages=()
exclude_packages=()
host_packages=()
plugins=()
init_scripts=()

# General options about the instance
arch='amd64'
locale='en_US'
charmap='UTF-8'
timezone='UTC'
apt_mirror=

# Hardcoded params.
# This script would explode if we had to take care of other distributions
distribution='debian'
codename='squeeze'
ami_name_suffix=$(date +%Y%m%d)
description=

# EC2 host info
instance_id=
region=
availability_zone=

# Volume and AMI info
# Filesystem, hardcoded for now, maybe we'll add a parameter later on
filesystem='xfs'
mountoptions=
volume_size='1'
device_path=
debootstrap_dir='/target'
imagedir=
volume_id=
snapshot_id=
ami_id=

# List of options
help="ec2debian-build-ami
This script creates a Debian Squeeze Amazon Machine Image.

Options (defaults in ${txtbld}bold${txtdef}):

${txtund}Bootstrapping${txtdef}
    --arch ARCH [i386|amd64]      Processor architecture of the image (${txtbld}${arch}${txtdef})
    --filesystem FS [ext2..4|xfs] Filesystem of the root volume (${txtbld}${filesystem}${txtdef})
    --volume-size SIZE            Default size of the root volume in GB (${txtbld}${volume_size}${txtdef})
    --plugin FILE                 Path to plugin script.
                                  Can be specified more than once.

    --timezone ZONE               Standard timezone (${txtbld}${timezone}${txtdef})
    --locale LOCALE               Standard locale (${txtbld}${locale}${txtdef})
    --charmap CHARMAP             Standard charmap (${txtbld}${charmap}${txtdef})

    --debootstrap-dir DIR         Debootstrap directory (${txtbld}${debootstrap_dir}${txtdef})
                                  The created volume will be mounted
                                  at \$debootstrap_dir/\$volume_id.

    --name SUFFIX                 AMI name suffix (${txtbld}${ami_name_suffix}${txtdef})
    --description DESC            Description of the AMI

${txtund}AWS${txtdef}
    --access-key ID               AWS Access Key (${txtbld}\$AWS_ACCESS_KEY${txtdef})
    --secret-key KEY              AWS Secret Key (${txtbld}\$AWS_SECRET_KEY${txtdef})

${txtund}Other options${txtdef}
    --debug                       Print debugging information
    --help                        Prints this help message
"

# Run through the parameters and save them to variables.
while [ $# -gt 0 ]; do
	case $1 in
		--arch)             arch=$2;                       shift 2 ;;
		--filesystem)       filesystem=$2;                 shift 2 ;;
		--volume-size)      volume_size=$2;                shift 2 ;;
		--name)             ami_name_suffix=$2;            shift 2 ;;
		--description)      description=$2;                shift 2 ;;
		--access-key)       AWS_ACCESS_KEY=$2;             shift 2 ;;
		--secret-key)       AWS_SECRET_KEY=$2;             shift 2 ;;
		--timezone)         timezone=$2;                   shift 2 ;;
		--locale)           locale=$2;                     shift 2 ;;
		--charmap)          charmap=$2;                    shift 2 ;;
		--debootstrap-dir)  debootstrap_dir=$2;            shift 2 ;;
		--plugin)           plugins+=("$2");               shift 2 ;;
		--debug)            set -x;                        shift   ;;
		--help)             printf -- "$help";             exit 0  ;;
		*)             die "Unrecognized option: $1" \
    "Type '$0 --help' to see a list of possible options"; ;;
	esac
done

# Check if the chosen fs is on we can handle.
case $filesystem in
	xfs)  ;;
	ext2) ;;
	ext3) ;;
	ext4) ;;
	*)    die "The filesystem $filesystem was not recognized." \
	          "Valid filesystems are ext[2-4] and xfs"      ;;
esac

# Required and default parameters
true ${AWS_ACCESS_KEY:?} ${AWS_SECRET_KEY:?}

# Check the architecture
[[ $arch != 'amd64' && $arch != 'i386' ]] && die "Unrecognized architecture: $arch"

# Export the AWS credentials, so that we can launch ec2-tools without specifying them
export AWS_ACCESS_KEY AWS_SECRET_KEY 

# Put all tasks in the tasks folder into an array
for task in `find $scriptdir/tasks -type f | sort`; do
	tasks+=($task)
done

# Specify specific points in the bootstrapping process, which the plugins can latch onto.
# This way plugins don't need fixing if we rename files.
TASK_PACKAGES="01-packages"
TASK_VOLUME="10-create-volume"
TASK_BOOTSTRAP="14-bootstrap"
TASK_MOUNT="15-mount"
TASK_APTSOURCES="21-apt-sources"
TASK_INITSCRIPTS="51-init-scripts"
TASK_UNMOUNT="71-unmount"
TASK_SNAPSHOT="80-ebs-snapshot"
TASK_CREATEAMI="95-register-ami"

# Invoke plugins so that they may reorder and add tasks
for plugin in "${plugins[@]}"; do
	[ -e $plugin ] || die "The plugin file $plugin does not exist."
	# Get the directory of the current plugin.
	# This way the plugins don't have to figure it out for themselves.
	plugindir=`dirname $plugin`
	source $plugin
done
unset plugindir

# Source all tasks in the right order
for task in ${tasks[*]}; do
	[ -e $task ] || die "The task $task does not exist."
	log "Run task: `basename $task`"
	taskdir=`dirname $task`
	source $task
done
unset taskdir
